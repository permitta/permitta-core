{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Moat","text":"<p>Moat makes OPA + Trino easy</p>"},{"location":"#architecture","title":"Architecture","text":"<p>OPA and Trino are an awesome combination, but maintaining the policy documents and required data object can be painful. Moat makes this easy with managed curation of principals and tables, as well as a predefined set of ABAC policies suitable for most uses</p> <p>Moat provides an API to serve bundles to OPA, including:</p> <ul> <li>Data objects and attributes ingested from various sources (SQL DBs,data catalogs etc)</li> <li>Principals and attributes/groups ingested from identity providers (SQL DB, LDAP, etc)</li> <li>Pre-built <code>rego</code> policy documents to support common use cases (e.g. RBAC/ABAC)</li> </ul> <p>Read more about how Trino and OPA work together</p>"},{"location":"#extensability","title":"Extensability","text":"<p>Moat is built to be extended. Custom connectors can be added easily to retrieve data from a wide range of sources, such as:</p> <ul> <li>IDPs: e.g. Keycloak, IdentityNow, Auth0</li> <li>User Directories e.g Azure AD, OpenLDAP</li> <li>Data Catalogs: e.g. Amundsen, OpenMetadata, Datahub</li> <li>Databases: e.g. MongoDB, DynamoDB, SQL DBs</li> <li>File Sources: e.g. json, yaml, csv</li> <li>API Sources: e.g. Custom Identity Providers</li> </ul>"},{"location":"#motivation","title":"Motivation","text":"<p>In late 2023 Open Policy Agent (OPA) was introduced into Trino as an authentication method. OPA is a very powerful policy enforcement engine which helps to solve many authorisation issues with the previously available  authorisation options in Trino. </p> <p>OPA provides the capability to implement very fine-grained R/ABAC policies to control access to data in Trino. OPA policies can control access at the catalog, schema, table or column level and provide column masking. </p> <p>OPA policies are defined in a language called Rego. While it is an expressive and powerful language, it has a steep learning curve and limits policy definition to users with software development skills. It is expected that users within  many organisations who are tasked with data policy definition do not possess these types of skills.</p> <p>OPA also requires context on the principals and objects, such as attributes or group mappings. This must be provided to OPA as a (possibly) large JSON object, and updated whenever these values change.  </p> <p>While extremely powerful, OPA is hard to use for non-developers, and has a significant integration cost. </p> <p>Moat simplifies the use of OPA with Trino by:</p> <ul> <li>Aggregating metadata from sources such as <code>Active Directory</code></li> <li>Delivering bundles of policy and context metadata to instances of OPA</li> </ul>"},{"location":"developer_setup/","title":"Developer Setup","text":""},{"location":"developer_setup/#application-components","title":"Application Components","text":"<ul> <li>API server is very lightweight and is based on <code>flask</code></li> <li>Unit tests are under <code>pytest</code></li> <li>ORM is SQLAlchemy with postgres16, unit tests use <code>DatabaseJanitor</code> with dockerised postgres</li> </ul>"},{"location":"developer_setup/#installation-of-dependencies","title":"Installation of dependencies","text":"<ul> <li>Virtual environment should be at the project root</li> <li>Requires local installation of OPA and python 3.12</li> <li>Supporting apps run under docker-compose</li> <li>An SQL client (e.g: dbeaver) is also required</li> </ul> <pre><code>brew install opa\nbrew install python@3.12\n\npython3.12 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\n</code></pre>"},{"location":"developer_setup/#code-formatting","title":"Code Formatting","text":"<pre><code># in project root\nisort --profile black moat/src\nblack moat/src\n</code></pre>"},{"location":"developer_setup/#running-the-dev-environment","title":"Running the dev environment","text":"<ul> <li>Run flask on 8000</li> </ul>"},{"location":"developer_setup/#starting-the-dev-server","title":"Starting the dev server","text":"<pre><code># if using podman\npodman machine init\npodman machine start\npodman-compose up -d\n\n# run dependencies\npodman-compose up -d\n\n# populate LLDAP:\npodman-compose exec lldap /bootstrap/bootstrap.sh\n\nexport PYTHONPATH=moat/src\nflask --app moat.src.app run --debug --port 8000\n\n# seed the database\npython moat/moat/src/seed_db.py\n\n# nuking a bad flask process\nkill $(pgrep -f flask)\n\n# all the data for lldap and postgres is stored in the `instance` dir. nuke it to reset the app\nrm -rf instance\n</code></pre>"},{"location":"developer_setup/#running-the-container","title":"Running the container","text":"<pre><code>podman run --rm -p 3000:8000 moat/moat:0.0.1\ncurl localhost:3000/api/v1/healthcheck\n</code></pre>"},{"location":"developer_setup/#running-with-docker-compose","title":"Running with Docker Compose","text":"<p>To run the Moat application along with its dependencies (OPA, PostgreSQL, etc.), you can add the following service to your <code>docker-compose.yaml</code> file:</p> <pre><code>services:\n\n  moat:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - FLASK_SECRET_KEY=your_secret_key\n      - OIDC_AUTH_PROVIDER_CLIENT_SECRET=your_client_secret\n    depends_on:\n      - opa\n      - postgres\n</code></pre>"},{"location":"developer_setup/#building-the-container-image","title":"Building the container image","text":"<pre><code>docker build -t moat/moat\n</code></pre>"},{"location":"developer_setup/#running-ingestion","title":"Running Ingestion","text":"<pre><code>export CONFIG_FILE_PATH=moat/config.principal_ingestion.yaml\ncli.py ingest --source=ldap --object-type=principal\n\n# or in the container\ndocker run moat ingest --connector-name=ldap --object-type=principal\n</code></pre>"},{"location":"developer_setup/#database-migrations","title":"Database Migrations","text":"<p><code>alembic</code> is used to migrate the database schema</p> <pre><code># create a new revision (in project root)\nexport PYTHONPATH=./moat/src\nalembic -c moat/alembic.ini revision --autogenerate -m \"message about the revision\"\n# or\n./entrypoint.sh migrate revision \"message about the revision\"\n\n# upgrade\nalembic upgrade head\n# or\n./entrypoint.sh migrate upgrade\n</code></pre>"},{"location":"developer_setup/#documentation","title":"Documentation","text":"<p>Docs are provided by <code>mkdocs</code> using the <code>mkdocs-material</code> theme. The documentation is automatically deployed to GitHub Pages via GitHub Actions when changes are pushed to the main branch.</p> <p>For local development:</p> <pre><code># render docs for development\nmkdocs serve\n</code></pre> <p>Manual deployment (not needed for normal workflow as it's automated):</p> <pre><code># deploy docs manually\nmkdocs gh-deploy\n\n# if it fails, try:\ngit config http.postBuffer 524288000\n</code></pre>"},{"location":"developer_setup/#scim-test-tool","title":"SCIM test tool","text":"<pre><code>pip install scim2-cli\n\n./test.sh scim\n</code></pre>"},{"location":"extensions/","title":"Extending Moat","text":"<p>Moat is designed to be extended in various ways to meet your specific needs.</p>"},{"location":"extensions/#custom-ingestions","title":"Custom Ingestions","text":"<p>Moat allows you to create custom ingestion connectors to import data from various sources. This is done by creating subclasses of the <code>ConnectorBase</code> class. Subclasses have a <code>CONNECTOR_NAME</code> property which allows the moat to select it at runtime </p>"},{"location":"extensions/#creating-a-custom-connector","title":"Creating a Custom Connector","text":"<p>To create a custom connector, follow these steps:</p> <ol> <li>Create a new Python module for your connector</li> <li>Create a class that inherits from <code>ConnectorBase</code></li> <li>Implement the required methods:</li> <li><code>acquire_data(platform)</code>: Fetch data from your source</li> <li><code>get_principals()</code>: Transform your data into <code>PrincipalDio</code> objects</li> <li><code>get_principal_attributes()</code> (optional): Extract attributes for principals</li> </ol>"},{"location":"extensions/#example-json-file-connector","title":"Example: JSON File Connector","text":"<p>Here's an example of a connector that loads users from a local JSON file:</p> <pre><code>import json\nfrom app_logger import Logger, get_logger\nfrom app_config import AppConfigModelBase\nfrom ingestor.connectors.connector_base import ConnectorBase\nfrom ingestor.models import PrincipalDio, PrincipalAttributeDio\n\nlogger: Logger = get_logger(\"ingestor.connectors.json_file_connector\")\n\nclass JsonFileConnectorConfig(AppConfigModelBase):\n    CONFIG_PREFIX: str = \"json_file_connector\"\n    json_file_path: str = \"users.json\"\n\nclass JsonFileConnector(ConnectorBase):\n    CONNECTOR_NAME: str = \"json-file\"\n\n    def __init__(self):\n        super().__init__()\n        self.config: JsonFileConnectorConfig = JsonFileConnectorConfig.load()\n        self.users = []\n        logger.info(f\"Created JSON file connector using file: {self.config.json_file_path}\")\n\n    def acquire_data(self, platform: str) -&gt; None:\n        self.platform = platform\n        with open(self.config.json_file_path, 'r') as file:\n            self.users = json.load(file)\n        logger.info(f\"Retrieved {len(self.users)} users from JSON file\")\n\n    def get_principals(self) -&gt; list[PrincipalDio]:\n        principals: list[PrincipalDio] = []\n\n        for user in self.users:\n             principal = PrincipalDio(\n                 fq_name=user.get(\"id\"),\n                 first_name=user.get(\"first_name\"),\n                 last_name=user.get(\"last_name\"),\n                 user_name=user.get(\"username\"),\n                 email=user.get(\"email\"),\n                 platform=self.platform,\n             )\n             principals.append(principal)\n\n        return principals\n\n    def get_principal_attributes(self) -&gt; list[PrincipalAttributeDio]:\n        attributes: list[PrincipalAttributeDio] = []\n\n        for user in self.users:\n             fq_name = user.get(\"id\")\n\n             # Process groups if they exist\n             if \"groups\" in user:\n                 for group in user[\"groups\"]:\n                     attribute = PrincipalAttributeDio(\n                         fq_name=fq_name,\n                         attribute_key=\"group\",\n                         attribute_value=group,\n                         platform=self.platform,\n                     )\n                     attributes.append(attribute)\n\n             # Process any other attributes\n             if \"attributes\" in user:\n                 for key, value in user[\"attributes\"].items():\n                     attribute = PrincipalAttributeDio(\n                         fq_name=fq_name,\n                         attribute_key=key,\n                         attribute_value=value,\n                         platform=self.platform,\n                     )\n                     attributes.append(attribute)\n\n        return attributes\n</code></pre>"},{"location":"extensions/#example-json-file-format","title":"Example JSON File Format","text":"<p>The connector above expects a JSON file with a structure like this:</p> <pre><code>[\n  {\n    \"id\": \"user1\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"username\": \"johndoe\",\n    \"email\": \"john.doe@example.com\",\n    \"groups\": [\"admin\", \"users\"],\n    \"attributes\": {\n      \"department\": \"Engineering\",\n      \"location\": \"New York\"\n    }\n  },\n  {\n    \"id\": \"user2\",\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Smith\",\n    \"username\": \"janesmith\",\n    \"email\": \"jane.smith@example.com\",\n    \"groups\": [\"users\"],\n    \"attributes\": {\n      \"department\": \"Marketing\",\n      \"location\": \"San Francisco\"\n    }\n  }\n]\n</code></pre>"},{"location":"extensions/#configuring-your-connector","title":"Configuring Your Connector","text":"<p>The <code>JsonFileConnectorConfig</code> class uses the <code>AppConfigModelBase</code> to load configuration values from a YAML file.  You can configure your connector by adding entries to your config file (typically at <code>moat/config/config.yaml</code>):</p> <pre><code># config files use the CONFIG_PREFIX (json_file_connector) in the config class to load the parameters\njson_file_connector.json_file_path: /path/to/your/users.json\n</code></pre> <p>The configuration values are loaded automatically when the connector is initialized.</p>"},{"location":"extensions/#using-your-custom-connector","title":"Using Your Custom Connector","text":"<p>Once you've created your connector, you can invoke it from the CLI like any other connector:</p> <pre><code>export CONFIG_FILE_PATH=moat/config.custom_ingestion.yaml\ncli.py ingest --connector-name=json-file --object-type=principal\ncli.py ingest --connector-name=json-file --object-type=principal_attribute\n</code></pre>"},{"location":"how_it_works/","title":"How it works","text":""},{"location":"how_it_works/#overview","title":"Overview","text":"<p>Moat provides the data required by OPA to make its policy decisions.  OPA expects a bundle file (a tarball) comprised of:</p> <ul> <li><code>rego</code> policy documents defining the policies to be applied</li> <li>A data object - a <code>json</code> file containing:</li> <li>User metadata - e.g username, groups, attributes, tags</li> <li>Object (tables/views) metadata - e.g database, schema, table name and tags (usually from a data catalog)</li> </ul> <p>OPA periodically requests this data via an HTTP(S) API.</p>"},{"location":"how_it_works/#metadata-classes","title":"Metadata Classes","text":"<p>The metadata classes supported by moat are:</p> <ul> <li>Principals: Users and service accounts</li> <li>Principal Attributes: Key-value pairs describing users, normally from an identity provider</li> <li>Principal Groups: RBAC-style user groups</li> <li>Resources: Data objects such as databases, schemas, tables, columns, collections etc</li> <li>Resource Attributes: Key-value pairs as either attributes or tags on data objects. Normally from a data catalog</li> </ul>"},{"location":"how_it_works/#user-metadata","title":"User Metadata","text":"<p>User metadata can either be periodically ingested from an identity source, or pushed by a SCIM2.0 client.</p>"},{"location":"how_it_works/#scim20","title":"SCIM2.0","text":"<p>Moat implements the industry standard SCIM2.0 protocol to allow changes to users, groups and entitlements to be received in near real time. The standard <code>User</code> and <code>Group</code> schemas are supported, and custom schemas can be defined. See scim for more information</p>"},{"location":"how_it_works/#ingestion","title":"Ingestion","text":"<p>For implementations where a SCIM client is not available or desired, users, groups and entitlements can be  ingested from various sources. Currently Moat supports <code>LDAP</code> as a source of users and groups.</p> <p>The ingestion system is easy to extend by providing a subclass containing the specific implementation of your chosen identity source. See extensions for more information on custom connectors.</p>"},{"location":"how_it_works/#object-metadata","title":"Object Metadata","text":"<p>Object metadata is ingested in the same way as users and groups. Currently moat supports SQL sources via DBAPI  connectors to ingest data objects and their attributes or tags. Custom connectors can also be built for sources other  than those supported OOTB. Contributions are most welcome for new connectors.</p>"},{"location":"how_it_works/#policy-documents","title":"Policy Documents","text":"<p>Policy documents are not ingested by moat as such, but are included in the bundle provided to trino.</p> <p>It is recommended that policy documents be controlled using normal version control tooling (.e.g git). The <code>rego</code> files can be provided to moat using either a <code>git-sync</code> pattern, or any normal CICD process.</p> <p>Configmaps are a good pattern for kubernetes-based deployments</p>"},{"location":"trino_and_opa/","title":"How Trino and OPA work together","text":"<p>When an SQL statement is supplied to Trino for execution, it executes a (potentially) large number of authorisation  checks. Each of these authorisation checks includes an action, a subject and an object. The subject is the user executing the query, and the object is the catalog, schema, table or column. </p> <p>Upon receiving an authorisation request OPA executes tests defined in the policy document using an input variable  provided by Trino, against the data in the context data object.</p> <p>For example, a user executes a simple query:</p> <p><code>SELECT a, b, c from datalake.hr.employees</code></p> <p>This results in many requests to OPA, one of which checks if this user (alice)  is allowed to select these columns:</p> <pre><code>{\n  \"context\": {\n    \"identity\": {\n      \"user\": \"alice\"\n    }\n  },\n  \"action\": {\n    \"operation\": \"SelectFromColumns\",\n    \"resource\": {\n      \"table\": {\n        \"catalogName\": \"datalake\",\n        \"schemaName\": \"hr\",\n        \"tableName\": \"employees\",\n        \"columns\": [\"a\", \"b\", \"c\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"trino_and_opa/#policy-implementation","title":"Policy Implementation","text":"<p>To implement ABAC/RBAC policies with OPA, we require a <code>data</code> object containing the <code>principals</code>  and <code>data-objects</code> (schemas, tables, columns etc) as well at attributes or groups for each.  OPA uses the information in the <code>data</code> object, along with <code>input</code> object to enforce the rules defined in the rego policy document.</p>"},{"location":"trino_and_opa/#example-rego-policy-document","title":"Example Rego Policy Document","text":"<p>This policy ensures that any user who exists in our data object is allowed to <code>SELECT</code> from any table in the <code>datalake</code> catalog, as long as the schema is in our data object.  All other operations on any other object will be denied</p> <pre><code>package moat.trino\n\nimport rego.v1\nimport data.trino\n\nallow if {\n  # action is SELECT\n  input.action.operation == \"SelectFromColumns\"\n\n  # user exists in our data object\n  some principal in data.trino.principals\n  principal.name == input.context.identity.user\n\n  # catalog is datalake\n  input.action.resource.table.catalogName == \"datalake\"\n\n  # schema is in our data object\n  some schema in data.trino.schemas\n  schema.name == input.action.resource.table.schemaName\n}\n</code></pre>"},{"location":"trino_and_opa/#example-data-object","title":"Example Data object","text":"<pre><code>{ \n  \"principals\": [\n    {\n      \"name\": \"alice\"\n    },\n    {\n      \"name\": \"bob\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"name\": \"hr\"\n    }\n  ]\n}\n\n</code></pre>"},{"location":"config/configuration/","title":"Configuration File Syntax","text":"<p>All configuration items are defined in a yaml file provided to the application. The location of this file is defined by an environment variable called  <code>CONFIG_FILE_PATH</code>. The value of this variable should be an absolute path.</p> <p>The yaml file is a flat structure, with all keys at the top level. E.g:</p> <pre><code>ldap_client.host: localhost\nldap_client.port: \"3890\"\nldap_client.base_dn: dc=example,dc=com\nldap_client.user_dn: uid=admin,ou=people,dc=example,dc=com\n</code></pre>"},{"location":"config/configuration/#inheritance","title":"Inheritance","text":"<p>A <code>yaml</code> config file can inherit from another file and add or replace its contents by key. For example</p>"},{"location":"config/configuration/#appconfigconfigyaml","title":"/app/config/config.yaml","text":"<pre><code>common.db_connection_string: \"sqlite:///:memory:\"\ncommon.db_port: \"5432\"\n</code></pre>"},{"location":"config/configuration/#appconfigconfig_with_overridesyaml","title":"/app/config/config_with_overrides.yaml","text":"<pre><code>config.base:  \"/app/config/config.yaml\"   # fully qualified path required\ncommon.db_port: \"1234\"                    # replaced\ncommon.db_name: \"moat\"                    # new\n</code></pre> <p>When loading <code>config_with_overrides.yaml</code>, the following config would be resolved:</p> <pre><code>common.db_connection_string: \"sqlite:///:memory:\"\ncommon.db_port: \"1234\"\ncommon.db_name: \"moat\"\n</code></pre> <p>For a complete list of all available configuration properties, see Properties.</p>"},{"location":"config/configuration/#environment-variables","title":"Environment Variables","text":"<p>If environment variables are preferred for some configuration items (e.g secrets) these can be referenced in the configuration file using a bash-style syntax. These values will be retrieved from the environment and included in the configuration object at runtime.</p> <pre><code>ldap_client.password: $LDAP_PASSWORD \nldap_client.user_dn: uid=$LDAP_UID,ou=people,dc=example,dc=com\n</code></pre>"},{"location":"config/properties/","title":"Configuration Properties","text":"<p>This document lists all available configuration properties for Moat</p>"},{"location":"config/properties/#bundle_generatorstatic_rego_file_path","title":"<code>bundle_generator.static_rego_file_path</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>opa/trino</code></li> <li>Example: <code>opa/trino</code></li> </ul> <p>The path to static Rego files used for bundle generation.</p>"},{"location":"config/properties/#bundle_generatortemp_directory","title":"<code>bundle_generator.temp_directory</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>/tmp/moat-bundles</code></li> </ul> <p>The temporary directory for bundle generation.</p>"},{"location":"config/properties/#commondb_connection_string","title":"<code>common.db_connection_string</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>postgresql://user:password@localhost:5432/moat</code></li> </ul> <p>The database connection string for common operations.</p>"},{"location":"config/properties/#commonsuper_secret","title":"<code>common.super_secret</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>my-secret-key</code></li> </ul> <p>A secret value used for common operations.</p>"},{"location":"config/properties/#connectorjson_fileprincipalsfile_path","title":"<code>connector.json_file.principals.file_path</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>/data/principals.json</code></li> </ul> <p>The path to the JSON file containing principal data.</p>"},{"location":"config/properties/#databasedatabase","title":"<code>database.database</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>moat</code></li> </ul> <p>The database name.</p>"},{"location":"config/properties/#databasehost","title":"<code>database.host</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>localhost</code></li> </ul> <p>The database host.</p>"},{"location":"config/properties/#databasepassword","title":"<code>database.password</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>password</code></li> </ul> <p>The database password.</p>"},{"location":"config/properties/#databaseport","title":"<code>database.port</code>","text":"<ul> <li>Type: <code>integer</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>5432</code></li> </ul> <p>The database port.</p>"},{"location":"config/properties/#databaseprotocol","title":"<code>database.protocol</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>postgresql</code></li> </ul> <p>The database protocol.</p>"},{"location":"config/properties/#databaseseed_data_path","title":"<code>database.seed_data_path</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>/data/seed</code></li> </ul> <p>The path to seed data for the database.</p>"},{"location":"config/properties/#databaseuser","title":"<code>database.user</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>moat</code></li> </ul> <p>The database user.</p>"},{"location":"config/properties/#dbapi_connectorattribute_key_key","title":"<code>dbapi_connector.attribute_key_key</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>attribute_key</code></li> <li>Example: <code>attribute_key</code></li> </ul> <p>The key for attribute key in DBAPI connector.</p>"},{"location":"config/properties/#dbapi_connectorattribute_value_key","title":"<code>dbapi_connector.attribute_value_key</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>attribute_value</code></li> <li>Example: <code>attribute_value</code></li> </ul> <p>The key for attribute value in DBAPI connector.</p>"},{"location":"config/properties/#dbapi_connectorclient_type","title":"<code>dbapi_connector.client_type</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>trino</code></li> </ul> <p>The type of DBAPI client.</p>"},{"location":"config/properties/#dbapi_connectordata_object_table_column_query","title":"<code>dbapi_connector.data_object_table_column_query</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>SELECT table_name, column_name FROM information_schema.columns</code></li> </ul> <p>The query to get data object table columns.</p>"},{"location":"config/properties/#dbapi_connectorfq_name_key","title":"<code>dbapi_connector.fq_name_key</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>fq_name</code></li> <li>Example: <code>fq_name</code></li> </ul> <p>The key for fully qualified name in DBAPI connector.</p>"},{"location":"config/properties/#dbapi_connectorobject_type_key","title":"<code>dbapi_connector.object_type_key</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>object_type</code></li> <li>Example: <code>object_type</code></li> </ul> <p>The key for object type in DBAPI connector.</p>"},{"location":"config/properties/#ldap_clientbase_dn","title":"<code>ldap_client.base_dn</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>dc=example,dc=com</code></li> </ul> <p>The LDAP base DN.</p>"},{"location":"config/properties/#ldap_clienthost","title":"<code>ldap_client.host</code>","text":"<ul> <li>Type: <code>url</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>ldap.domain.com</code></li> </ul> <p>The LDAP server host.</p>"},{"location":"config/properties/#ldap_clientpassword","title":"<code>ldap_client.password</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>$LDAP_PASSWORD</code></li> </ul> <p>The LDAP password.</p>"},{"location":"config/properties/#ldap_clientport","title":"<code>ldap_client.port</code>","text":"<ul> <li>Type: <code>integer</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>3890</code></li> </ul> <p>The LDAP server port.</p>"},{"location":"config/properties/#ldap_clientuser_base_dn","title":"<code>ldap_client.user_base_dn</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>ou=people,dc=example,dc=com</code></li> </ul> <p>The LDAP user base DN.</p>"},{"location":"config/properties/#ldap_clientuser_dn","title":"<code>ldap_client.user_dn</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>uid=admin,ou=people,dc=example,dc=com</code></li> </ul> <p>The LDAP user DN.</p>"},{"location":"config/properties/#ldap_connectorattr_email","title":"<code>ldap_connector.attr_email</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>mail</code></li> </ul> <p>The LDAP attribute for email.</p>"},{"location":"config/properties/#ldap_connectorattr_first_name","title":"<code>ldap_connector.attr_first_name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>givenName</code></li> </ul> <p>The LDAP attribute for first name.</p>"},{"location":"config/properties/#ldap_connectorattr_groups","title":"<code>ldap_connector.attr_groups</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>memberOf</code></li> </ul> <p>The LDAP attribute for groups.</p>"},{"location":"config/properties/#ldap_connectorattr_last_name","title":"<code>ldap_connector.attr_last_name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>sn</code></li> </ul> <p>The LDAP attribute for last name.</p>"},{"location":"config/properties/#ldap_connectorattr_user_id","title":"<code>ldap_connector.attr_user_id</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>uid</code></li> </ul> <p>The LDAP attribute for user ID.</p>"},{"location":"config/properties/#ldap_connectorattr_user_name","title":"<code>ldap_connector.attr_user_name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>cn</code></li> </ul> <p>The LDAP attribute for user name.</p>"},{"location":"config/properties/#ldap_connectorgroup_name_regex","title":"<code>ldap_connector.group_name_regex</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>(.*)</code></li> <li>Example: <code>cn=(.*),ou=groups,dc=example,dc=com</code></li> </ul> <p>The regex to extract group names from LDAP group DNs.</p>"},{"location":"config/properties/#ldap_connectoruser_search_base","title":"<code>ldap_connector.user_search_base</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>ou=people,dc=example,dc=com</code></li> </ul> <p>The LDAP user search base.</p>"},{"location":"config/properties/#ldap_connectoruser_search_filter","title":"<code>ldap_connector.user_search_filter</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>(objectClass=person)</code></li> </ul> <p>The LDAP user search filter.</p>"},{"location":"config/properties/#loggerroot_level","title":"<code>logger.root_level</code>","text":"<ul> <li>Type: <code>enum</code></li> <li>Values: <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code></li> <li>Default: <code>INFO</code></li> <li>Example: <code>DEBUG</code></li> </ul> <p>Sets the log level of the root logger. This applies to all loggers within Moat as they all inherit from the root logger.</p>"},{"location":"config/properties/#loggername_level","title":"<code>logger.&lt;name&gt;_level</code>","text":"<ul> <li>Type: <code>enum</code></li> <li>Values: <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code></li> <li>Default: <code>INFO</code></li> <li>Example: <code>DEBUG</code></li> </ul> <p>Sets the log level for a specific logger named <code>&lt;name&gt;</code>.</p>"},{"location":"config/properties/#opa_authz_providerpolicy_file_path","title":"<code>opa_authz_provider.policy_file_path</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>opa/moat/authz.rego</code></li> </ul> <p>The path to the OPA policy file.</p>"},{"location":"config/properties/#opa_authz_providerpolicy_name","title":"<code>opa_authz_provider.policy_name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>moat/authz</code></li> <li>Example: <code>moat/authz</code></li> </ul> <p>The name of the OPA policy.</p>"},{"location":"config/properties/#opa_clienthostname","title":"<code>opa_client.hostname</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>localhost</code></li> <li>Example: <code>opa.moat.svc.cluster.local</code></li> </ul> <p>The hostname of the OPA instance that Moat should connect to.</p>"},{"location":"config/properties/#opa_clientpath","title":"<code>opa_client.path</code>","text":"<ul> <li>Type: <code>path</code></li> <li>Default: <code>/v1/data/moat/authz/allow</code></li> <li>Example: <code>/v1/data/moat/authz/allow</code></li> </ul> <p>The path to the OPA API endpoint.</p>"},{"location":"config/properties/#opa_clientport","title":"<code>opa_client.port</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>8181</code></li> <li>Example: <code>8181</code></li> </ul> <p>The port of the OPA instance.</p>"},{"location":"config/properties/#opa_clientscheme","title":"<code>opa_client.scheme</code>","text":"<ul> <li>Type: <code>enum</code></li> <li>Values: <code>https</code>, <code>http</code></li> <li>Default: <code>http</code></li> <li>Example: <code>https</code></li> </ul> <p>The scheme to use when connecting to OPA. For production deployments, HTTPS should be used.</p>"},{"location":"config/properties/#opa_clienttimeout_seconds","title":"<code>opa_client.timeout_seconds</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>1</code></li> <li>Example: <code>10</code></li> </ul> <p>The timeout in seconds for OPA client requests.</p>"},{"location":"config/properties/#trino_clienthost","title":"<code>trino_client.host</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>trino.example.com</code></li> </ul> <p>The Trino server host.</p>"},{"location":"config/properties/#trino_clientpassword","title":"<code>trino_client.password</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>password</code></li> </ul> <p>The Trino password.</p>"},{"location":"config/properties/#trino_clientport","title":"<code>trino_client.port</code>","text":"<ul> <li>Type: <code>integer</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>8080</code></li> </ul> <p>The Trino server port.</p>"},{"location":"config/properties/#trino_clientusername","title":"<code>trino_client.username</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>trino</code></li> </ul> <p>The Trino username.</p>"},{"location":"deployment/deployment/","title":"Deployment","text":"<p>It is recommended to deploy <code>moat</code> in a containerised environment (e.g Kubernetes). A moat deployment consists of an api server and a number of cronjobs.</p>"},{"location":"deployment/deployment/#api-server","title":"API Server","text":"<p>The API server should be deployed using a k8s <code>kind: Deployment</code> with optional replication. The API service is not required to be highly-available so a single replica is fine for most purposes.</p> <p>It is highly recommended that moat be deployed behind an SSL enabled load balancer or reverse proxy</p>"},{"location":"deployment/deployment/#ingestion-cronjobs","title":"Ingestion Cronjobs","text":"<p>Data in moat is ingested and maintained by periodic ingestion jobs. These can be implemented in many ways however k8s <code>kind: CronJob</code> are the recommended pattern. Any scheduler (crontab, airflow, CICD etc) can be used to execute the ingestion jobs via the CLI or container.</p> <p>In general, four ingestion jobs are required, and can run at different frequencies. The individual jobs ingest: * Principals (e.g users from a LDAP source) * Principal attributes (e.g user tags from IdentityNow or other IDP) * Resources (e.g tables or collections from a database) * Resource attributes (e.g table tags from a database or data catalog)</p>"},{"location":"deployment/deployment/#opa-and-trino","title":"OPA and Trino","text":"<p>The OPA instance should be deployed as \"close\" as possible to the Trino coordinator. The API between Trino and OPA is heavily used, so eliminating network hops is cruical for performance. Ideally the OPA container should be in the same pod, or at least on the name node as the coordinator</p>"},{"location":"deployment/deployment/#deploying-moat-in-kubernetes","title":"Deploying <code>moat</code> in Kubernetes","text":"<p>The repository includes example Kubernetes manifests that can be used as a starting point for deploying <code>moat</code> in a Kubernetes environment.  These templates are examples only and should be customized to fit your specific requirements and environment.</p>"},{"location":"deployment/deployment/#example-kubernetes-manifests","title":"Example Kubernetes Manifests","text":"<p>The following Kubernetes manifest templates are provided:</p>"},{"location":"deployment/deployment/#server-components","title":"Server Components","text":"<ul> <li><code>kubernetes/server/deployment.yaml</code>: Deployment for the moat-api server</li> <li><code>kubernetes/server/service.yaml</code>: Service to expose the moat-api</li> <li><code>kubernetes/server/configmap.yaml</code>: ConfigMap for Rego policies</li> </ul>"},{"location":"deployment/deployment/#ingestor-components","title":"Ingestor Components","text":"<ul> <li><code>kubernetes/ingestor/cronjob.yaml</code>: CronJob for scheduled data ingestion</li> <li><code>kubernetes/ingestor/configmap.yaml</code>: ConfigMap for ingestor configuration</li> </ul>"},{"location":"deployment/deployment/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Customize the configuration files:</li> <li>Update the Rego policies in <code>configmap.yaml</code> with your actual authorization policies</li> <li>Create appropriate secrets for database connections and other sensitive information</li> <li> <p>Modify the ingestor configuration to match your data sources</p> </li> <li> <p>Apply the Kubernetes manifests:</p> </li> </ol> <pre><code>kubectl apply -f kubernetes/server/\nkubectl apply -f kubernetes/ingestor/\n</code></pre>"},{"location":"deployment/deployment/#important-considerations","title":"Important Considerations","text":"<ul> <li>Resource Requirements: Adjust CPU and memory requests/limits based on your workload</li> <li>Scaling: Consider setting up horizontal pod autoscaling for the API server</li> <li>Persistence: Configure appropriate persistent storage for any stateful components</li> <li>Security: Review and enhance the security settings, especially for production deployments</li> <li>Monitoring: Set up monitoring and alerting for the deployed components</li> </ul> <p>Remember that these templates are starting points and should be adapted to your specific infrastructure, security requirements, and operational practices.</p>"},{"location":"deployment/opa_setup/","title":"OPA Setup","text":"<p>OPA should be configured to load its bundle from the bundle API exposed by moat. </p> <pre><code>services:\n  moat:\n    url: https://moat.example.com/api/v1/opa/     # replace with the hostname of your installation\n    credentials:\n      bearer:\n        token_path: /config/token.txt             # pre-shared bearer token should be applied to the moat config and mounted here\n\ndecision_logs:                                    # if decision logs are required, enable this block\n  service: moat\n  resource: /decision\n  reporting:\n    min_delay_seconds: 1\n    max_delay_seconds: 10\n\nbundles:                                          # ensure that the bundle persistence is enabled for better durability\n  trino:\n    service: moat\n    resource: /bundle/trino\n    persist: true\n    polling:\n      min_delay_seconds: 10\n      max_delay_seconds: 20\n\nstatus:\n  service: moat\n\npersistence_directory: /persistence\n</code></pre>"},{"location":"provisioning/scim/","title":"SCIM2.0","text":"<p>Moat provides a <code>SCIM2.0</code> compliant interface to make it easy for identity providers and other supported client types.</p>"},{"location":"provisioning/scim/#configuration","title":"Configuration","text":""},{"location":"provisioning/scim/#client-configuration","title":"Client Configuration","text":"<p>When connecting a client to moat's SCIM2.0 server, minimal configuration is required as a <code>/ServiceProviderConfig</code>  endpoint has been provided, which allows auto-configuration of clients. </p> <p>The SCIM2.0 service is available at <code>/api/scim/v2/</code></p> <p>See auth for details of API authentication </p>"},{"location":"provisioning/scim/#schemas","title":"Schemas","text":"<p>Moat provides two default SCIM2.0 schemas, User and Group. </p> <p>The default schema files are located at:</p> <ul> <li><code>/moat/config/scim_user_schema.json</code></li> <li><code>/moat/config/scim_group_schema.json</code></li> </ul>"},{"location":"provisioning/scim/#urnietfparamsscimschemascore20user","title":"urn:ietf:params:scim:schemas:core:2.0:User","text":"Field Type Purpose <code>id</code> string User ID in source system. Defaults to UUID if not set <code>userName</code> string The username which will be provided to OPA / Trino <code>name.givenName</code> string User's first name <code>name.familyName</code> string User's last name <code>emails</code> array <code>emails[].value</code> email Email address. Only primary is captured <code>emails[].primary</code> bool Primary email or other <code>active</code> bool Whether the user is active or not <code>entitlements</code> array <code>entitlements[].value</code> string The user's entitlement"},{"location":"provisioning/scim/#urnietfparamsscimschemascore20group","title":"urn:ietf:params:scim:schemas:core:2.0:Group","text":"Field Type Purpose <code>id</code> string User ID in source system. Defaults to UUID if not set <code>displayName</code> string The group name from the source <code>members</code> array <code>members.value</code> string Member username (Should match <code>User.userName</code>) <code>members.type</code> string Member type <code>User</code> or <code>Group</code> <code>members.$ref</code> string The URI of this group <code>members.display</code> string Human readable name or description"},{"location":"provisioning/scim/#schema-customisation","title":"Schema Customisation","text":"<p>The schemas are configurable to suit your specific use case. To use a custom schema, follow these steps:</p>"},{"location":"provisioning/scim/#1-define-and-mount-custom-schema-file","title":"1. Define and mount custom schema file","text":"<p>Edit your schema file and store/mount it in the local filesystem, e.g <code>/opt/moat/scim/</code></p> <p>The schema file must be <code>JSON</code> format and be generally compliant with the SCIM2.0 protocol. Many examples are available</p>"},{"location":"provisioning/scim/#2-define-jsonpaths-to-extract-the-required-information","title":"2. Define <code>jsonpaths</code> to extract the required information","text":"<p>Moat's SCIM interface uses <code>jsonpath</code> to extract the required values from the SCIM payload which are needed for ingestion into the database. See the <code>ScimConfig</code> class or configuration for details.</p> <pre><code>// schema\n{\n    \"id\": \"urn:ietf:params:scim:schemas:core:2.0:User\",\n    \"name\": \"User\",\n    \"description\": \"User Account\",\n    \"attributes\": [\n        {\n            \"name\": \"userName\",\n            ...\n        },\n        {\n            \"name\": \"email\",\n            ...\n        },\n    ]\n}\n\n// payload\n{\n    \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n    \"userName\": \"alice.cooper\",\n    \"email\": \"alice.cooper@moat.io\"\n}\n\n// config\nscim.principal_fq_name_jsonpath: \"$.userName\"\nscim.principal_email_jsonpath: \"$.email\"\n</code></pre>"},{"location":"provisioning/scim/#3-run-the-scim-test-tool-to-check-for-compliance","title":"3. Run the SCIM test tool to check for compliance","text":"<p>Check developer setup for details of the <code>scim2-cli</code> tool which can be used to test schemas</p>"},{"location":"provisioning/scim/#attribute-extraction","title":"Attribute extraction","text":"<p>As Moat is designed for both ABAC and RBAC usage, the SCIM interface supports attributes to be extracted from any part of the payload.</p> <p>In this example, a custom schema is defined (a better name is suggested) and attributes are being extracted from it using the <code>jsonpath</code> expression. All keys selected by the <code>jsonpath</code> are converted to key-value pairs and applied to the user.</p> <p>Multi-value attributes are stored as comma-seperated text, but split into individual values by the bundler.</p> <pre><code>// payload\n{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\",\n        \"urn:ietf:params:scim:custom\",\n    ],\n    \"userName\": \"alice.cooper\",\n    \"email\": \"alice.cooper@moat.io\"\n    \"urn:ietf:params:scim:custom\": {\n        \"Employee\": \"True\",\n        \"Redact\": \"PII\",\n        \"Domain\": [\"Sales\", \"Customer\", \"HR\"],\n    },\n}\n\n// config\nscim.principal_attributes_jsonpath = \"$.'urn:ietf:params:scim:custom'\"\n</code></pre> <p>Extracted Attributes</p> Key Value Employee True Redact PII Domain Sales,Customer,HR"},{"location":"provisioning/scim/#use-by-non-scim-clients","title":"Use by non-scim clients","text":"<p>A client does not need to implement the full SCIM protocol in order to interact with the SCIM APIs. Fully-compliant  SCIM clients will use the metadata APIs (<code>/ResourceTypes</code>) etc, however simpler clients may prefer to directly use the <code>/User</code> and <code>/Group</code> endpoints. Each of these endpoints provides a standard CRUD interface via REST.</p>"},{"location":"security/auth/","title":"Authentication &amp; Authorization","text":"<p>Moat APIs support three authentication methods: <code>none</code>, <code>api-key</code> or <code>oauth2</code>. Each API can support a separate authentication method</p>"},{"location":"security/auth/#configuration","title":"Configuration","text":"<p>Configuration values take the form <code>api.&lt;resource-name&gt;.&lt;config-parameter&gt;</code></p> <pre><code># examples of auth methods per API\napi.healthcheck.auth_method: none # disables authentication on a resource\napi.opa.auth_method: api-key\napi.resources.auth_method: oauth2\n</code></pre>"},{"location":"security/auth/#api-key-authentication","title":"API Key Authentication","text":"<p>This method uses a pre-shared API key for authentication. Each request is authenticated if the supplied <code>Bearer</code> token matches that stored in the config</p>"},{"location":"security/auth/#configuration_1","title":"Configuration","text":"<pre><code>api.bundle.api-key: 6c0cbf5029aed0af395ac4b864c6b095\n</code></pre>"},{"location":"security/auth/#usage","title":"Usage","text":"<p>When making API requests, include the API key in the HTTP header:</p> <pre><code>curl -X GET https://your-moat-instance/api/endpoint \\\n  -H \"Authorization: Bearer 6c0cbf5029aed0af395ac4b864c6b095\"\n</code></pre>"},{"location":"security/auth/#oauth2-authentication","title":"OAuth2 Authentication","text":"<p>For more robust authentication, Moat supports OAuth2 authentication using the client credentials flow. In this scenario, moat is acting as a <code>resource server</code> with an external <code>authorisation server</code> (e.g Keycloak, Okta)</p>"},{"location":"security/auth/#configuration_2","title":"Configuration","text":"<pre><code># OAuth2 authentication configuration\napi.resources.auth_method: oauth2\napi.resources.oauth2_issuer: https://&lt;issuer-domain&gt;/oauth2/&lt;auth-server-id&gt;\napi.resources.oauth2_audience: &lt;audience&gt;\n</code></pre>"},{"location":"security/auth/#client-credentials-flow","title":"Client Credentials Flow","text":"<p>The client credentials flow is designed for server-to-server authentication where a client application requests an access token using its client credentials.</p>"},{"location":"security/auth/#steps","title":"Steps:","text":"<ol> <li>The client application authenticates with the OAuth2 provider using its client ID and client secret.</li> <li>The client requests an access token from the authorization server's token endpoint.</li> <li>The authorization server authenticates the client and issues an access token.</li> <li>The client uses the access token to authenticate requests to the Moat API.</li> <li>The moat API validates the token against the authorization server </li> </ol>"}]}