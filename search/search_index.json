{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Permitta-core","text":"<p>Permitta-core makes OPA + Trino easy</p> <p>OPA and Trino are an awesome combination, but maintaining the policy documents and required data object can be painful. Permitta-core makes this easy with managed curation of principals and tables, as well as a predefined set of ABAC policies suitable for most uses</p> <p>Permitta-core provides an API to serve bundles to OPA, including:</p> <ul> <li>Data objects and attributes ingested from various sources (SQL DBs,data catalogs etc)</li> <li>Principals and attributes/groups ingested from identity providers (SQL DB, LDAP, etc)</li> <li>Pre-built <code>rego</code> policy documents to support common use cases (e.g. RBAC/ABAC) </li> </ul>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#motivation","title":"Motivation","text":"<p>In late 2023 Open Policy Agent (OPA) was introduced into Trino as an authentication method. OPA is a very powerful policy enforcement engine which helps to solve many authorisation issues with the previously available  authorisation options in Trino. </p> <p>OPA provides the capability to implement very fine-grained R/ABAC policies to control access to data in Trino. OPA policies can control access at the catalog, schema, table or column level and provide column masking. </p> <p>OPA policies are defined in a language called Rego. While it is an expressive and powerful language, it has a steep learning curve and limits policy definition to users with software development skills. It is expected that users within  many organisations who are tasked with data policy definition do not possess these types of skills.</p> <p>OPA also requires context on the principals and objects, such as attributes or group mappings. This must be provided to OPA as a (possibly) large JSON object, and updated whenever these values change.  </p> <p>While extremely powerful, OPA is hard to use for non-developers, and has a significant integration cost. </p> <p>Permitta simplifies the use of OPA with Trino by:</p> <ul> <li>Aggregating metadata from sources such as <code>Active Directory</code></li> <li>Delivering bundles of policy and context metadata to instances of OPA</li> </ul>"},{"location":"#how-trino-and-opa-work-together","title":"How Trino and OPA work together","text":"<p>When an SQL statement is supplied to Trino for execution, it executes a (potentially) large number of authorisation  checks. Each of these authorisation checks includes an action, a subject and an object. The subject is the user executing the query, and the object is the catalog, schema, table or column. </p> <p>Upon receiving an authorisation request OPA executes tests defined in the policy document using an input variable  provided by Trino, against the data in the context data object.</p> <p>For example, a user executes a simple query:</p> <p><code>SELECT a, b, c from datalake.hr.employees</code></p> <p>This results in many requests to OPA, one of which checks if this user (alice)  is allowed to select these columns:</p> <pre><code>{\n  \"context\": {\n    \"identity\": {\n      \"user\": \"alice\"\n    }\n  },\n  \"action\": {\n    \"operation\": \"SelectFromColumns\",\n    \"resource\": {\n      \"table\": {\n        \"catalogName\": \"datalake\",\n        \"schemaName\": \"hr\",\n        \"tableName\": \"employees\",\n        \"columns\": [\"a\", \"b\", \"c\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"#policy-implementation","title":"Policy Implementation","text":"<p>To implement ABAC/RBAC policies with OPA, we require a <code>data</code> object containing the <code>principals</code>  and <code>data-objects</code> (schemas, tables, columns etc) as well at attributes or groups for each.  OPA uses the information in the <code>data</code> object, along with <code>input</code> object to enforce the rules defined in the rego policy document.</p>"},{"location":"#example-rego-policy-document","title":"Example Rego Policy Document","text":"<p>This policy ensures that any user who exists in our data object is allowed to <code>SELECT</code> from any table in the <code>datalake</code> catalog, as long as the schema is in our data object.  All other operations on any other object will be denied</p> <pre><code>package permitta.trino\n\nimport rego.v1\nimport data.trino\n\nallow if {\n  # action is SELECT\n  input.action.operation == \"SelectFromColumns\"\n\n  # user exists in our data object\n  some principal in data.trino.principals\n  principal.name == input.context.identity.user\n\n  # catalog is datalake\n  input.action.resource.table.catalogName == \"datalake\"\n\n  # schema is in our data object\n  some schema in data.trino.schemas\n  schema.name == input.action.resource.table.schemaName\n}\n</code></pre>"},{"location":"#example-data-object","title":"Example Data object","text":"<pre><code>{ \n  \"principals\": [\n    {\n      \"name\": \"alice\"\n    },\n    {\n      \"name\": \"bob\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"name\": \"hr\"\n    }\n  ]\n}\n\n</code></pre>"},{"location":"deployment/","title":"Deployment","text":"<p>It is recommended to deploy <code>permitta-core</code> in a containerised environment (e.g Kubernetes). A permitta-core deployment consists of an api server and a number of cronjobs.</p>"},{"location":"deployment/#api-server","title":"API Server","text":"<p>The API server should be deployed using a k8s <code>kind: Deployment</code> with optional replication. The API service is not required to be highly-available so a single replica is fine for most purposes.</p>"},{"location":"deployment/#ingestion-cronjobs","title":"Ingestion Cronjobs","text":"<p>Data in permitta-core is ingested and maintained by periodic ingestion jobs. These can be implemented in many ways however k8s <code>kind: CronJob</code> are the recommended pattern. Any scheduler (crontab, airflow, CICD etc) can be used to execute the ingestion jobs via the CLI or container.</p> <p>In general, four ingestion jobs are required, and can run at different frequencies. The individual jobs ingest: * Principals (e.g users from a LDAP source) * Principal attributes (e.g user tags from IdentityNow or other IDP) * Resources (e.g tables or collections from a database) * Resource attributes (e.g table tags from a database or data catalog)</p>"},{"location":"deployment/#opa-and-trino","title":"OPA and Trino","text":"<p>The OPA instance should be deployed as \"close\" as possible to the Trino coordinator. The API between Trino and OPA is heavily used, so eliminating network hops is cruical for performance. Ideally the OPA container should be in the same pod, or at least on the name node as the coordinator</p>"},{"location":"deployment/#deploying-permitta-core-in-kubernetes","title":"Deploying <code>permitta-core</code> in Kubernetes","text":"<p>The repository includes example Kubernetes manifests that can be used as a starting point for deploying <code>permitta-core</code> in a Kubernetes environment.  These templates are examples only and should be customized to fit your specific requirements and environment.</p>"},{"location":"deployment/#example-kubernetes-manifests","title":"Example Kubernetes Manifests","text":"<p>The following Kubernetes manifest templates are provided:</p>"},{"location":"deployment/#server-components","title":"Server Components","text":"<ul> <li><code>kubernetes/server/deployment.yaml</code>: Deployment for the permitta-api server</li> <li><code>kubernetes/server/service.yaml</code>: Service to expose the permitta-api</li> <li><code>kubernetes/server/configmap.yaml</code>: ConfigMap for Rego policies</li> </ul>"},{"location":"deployment/#ingestor-components","title":"Ingestor Components","text":"<ul> <li><code>kubernetes/ingestor/cronjob.yaml</code>: CronJob for scheduled data ingestion</li> <li><code>kubernetes/ingestor/configmap.yaml</code>: ConfigMap for ingestor configuration</li> </ul>"},{"location":"deployment/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Customize the configuration files:</li> <li>Update the Rego policies in <code>configmap.yaml</code> with your actual authorization policies</li> <li>Create appropriate secrets for database connections and other sensitive information</li> <li> <p>Modify the ingestor configuration to match your data sources</p> </li> <li> <p>Apply the Kubernetes manifests:</p> </li> </ol> <pre><code>kubectl apply -f kubernetes/server/\nkubectl apply -f kubernetes/ingestor/\n</code></pre>"},{"location":"deployment/#important-considerations","title":"Important Considerations","text":"<ul> <li>Resource Requirements: Adjust CPU and memory requests/limits based on your workload</li> <li>Scaling: Consider setting up horizontal pod autoscaling for the API server</li> <li>Persistence: Configure appropriate persistent storage for any stateful components</li> <li>Security: Review and enhance the security settings, especially for production deployments</li> <li>Monitoring: Set up monitoring and alerting for the deployed components</li> </ul> <p>Remember that these templates are starting points and should be adapted to your specific infrastructure, security requirements, and operational practices.</p>"},{"location":"developer_setup/","title":"Developer Setup","text":""},{"location":"developer_setup/#application-components","title":"Application Components","text":"<ul> <li>API server is very lightweight and is based on <code>flask</code></li> <li>Unit tests are under <code>pytest</code></li> <li>ORM is SQLAlchemy with postgres16, unit tests use <code>DatabaseJanitor</code> with dockerised postgres</li> </ul>"},{"location":"developer_setup/#installation-of-dependencies","title":"Installation of dependencies","text":"<ul> <li>Virtual environment should be at the project root</li> <li>Requires local installation of OPA and python 3.12</li> <li>Supporting apps run under docker-compose</li> <li>An SQL client (e.g: dbeaver) is also required</li> </ul> <pre><code>brew install opa\nbrew install python@3.12\n\npython3.12 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\n</code></pre>"},{"location":"developer_setup/#code-formatting","title":"Code Formatting","text":"<pre><code># in project root\nisort --profile black permitta/src\nblack permitta/src\n</code></pre>"},{"location":"developer_setup/#running-the-dev-environment","title":"Running the dev environment","text":"<ul> <li>Run flask on 8000</li> </ul>"},{"location":"developer_setup/#starting-the-dev-server","title":"Starting the dev server","text":"<pre><code># if using podman\npodman machine init\npodman machine start\npodman-compose up -d\n\n# run dependencies\ndocker-compose up -d\n\n# populate LLDAP:\ndocker compose exec lldap /bootstrap/bootstrap.sh\n\nexport PYTHONPATH=permitta/src\nflask --app permitta.src.app run --debug --port 8000\n\n# seed the database\npython permitta/permitta/src/seed_db.py\n\n# nuking a bad flask process\nkill $(pgrep -f flask)\n\n# all the data for lldap and postgres is stored in the `instance` dir. nuke it to reset the app\nrm -rf instance\n</code></pre>"},{"location":"developer_setup/#running-with-docker-compose","title":"Running with Docker Compose","text":"<p>To run the Permitta Core application along with its dependencies (OPA, PostgreSQL, etc.), you can add the following service to your <code>docker-compose.yaml</code> file:</p> <pre><code>services:\n\n  permitta-core:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - FLASK_SECRET_KEY=your_secret_key\n      - OIDC_AUTH_PROVIDER_CLIENT_SECRET=your_client_secret\n    depends_on:\n      - opa\n      - postgres\n</code></pre>"},{"location":"developer_setup/#ingestion","title":"Ingestion","text":"<pre><code>export CONFIG_FILE_PATH=permitta/config.principal_ingestion.yaml\ncli.py ingest --source=ldap --object-type=principal\n\n# or in the container\ndocker run permitta-core ingest --connector-name=ldap --object-type=principal\n</code></pre>"},{"location":"developer_setup/#documentation","title":"Documentation","text":"<p>Docs are provided by <code>mkdocs</code> using the <code>mkdocs-material</code> theme. The deployment command pushes the built docs to the <code>gh-pages</code> branch which triggers a deploy</p> <pre><code># render docs for development\nmkdocs serve\n\n# deploy docs\nmkdocs gh-deploy\n\n# if it fails, try:\ngit config http.postBuffer 524288000\n</code></pre>"},{"location":"config/configuration/","title":"Configuration File Syntax","text":"<p>All configuration items are defined in a yaml file provided to the application. The location of this file is defined by an environment variable called  <code>CONFIG_FILE_PATH</code>. The value of this variable should be an absolute path.</p> <p>The yaml file is a flat structure, with all keys at the top level. E.g:</p> <pre><code>ldap_client.host: localhost\nldap_client.port: \"3890\"\nldap_client.base_dn: dc=example,dc=com\nldap_client.user_dn: uid=admin,ou=people,dc=example,dc=com\n</code></pre> <p>For a complete list of all available configuration properties, see Properties.</p>"},{"location":"config/configuration/#environment-variables","title":"Environment Variables","text":"<p>If environment variables are preferred for some configuration items (e.g secrets) these can be referenced in the configuration file using a bash-style syntax. These values will be retrieved from the environment and included in the configuration object at runtime.</p> <pre><code>ldap_client.password: $LDAP_PASSWORD \nldap_client.user_dn: uid=$LDAP_UID,ou=people,dc=example,dc=com\n</code></pre>"},{"location":"config/properties/","title":"Configuration Properties","text":"<p>This document lists all available configuration properties for Permitta Core</p>"},{"location":"config/properties/#bundle_generatorstatic_rego_file_path","title":"<code>bundle_generator.static_rego_file_path</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>opa/trino</code></li> <li>Example: <code>opa/trino</code></li> </ul> <p>The path to static Rego files used for bundle generation.</p>"},{"location":"config/properties/#bundle_generatortemp_directory","title":"<code>bundle_generator.temp_directory</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>/tmp/permitta-bundles</code></li> </ul> <p>The temporary directory for bundle generation.</p>"},{"location":"config/properties/#commondb_connection_string","title":"<code>common.db_connection_string</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>postgresql://user:password@localhost:5432/permitta</code></li> </ul> <p>The database connection string for common operations.</p>"},{"location":"config/properties/#commonsuper_secret","title":"<code>common.super_secret</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>my-secret-key</code></li> </ul> <p>A secret value used for common operations.</p>"},{"location":"config/properties/#connectorjson_fileprincipalsfile_path","title":"<code>connector.json_file.principals.file_path</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>/data/principals.json</code></li> </ul> <p>The path to the JSON file containing principal data.</p>"},{"location":"config/properties/#databasedatabase","title":"<code>database.database</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>permitta</code></li> </ul> <p>The database name.</p>"},{"location":"config/properties/#databasehost","title":"<code>database.host</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>localhost</code></li> </ul> <p>The database host.</p>"},{"location":"config/properties/#databasepassword","title":"<code>database.password</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>password</code></li> </ul> <p>The database password.</p>"},{"location":"config/properties/#databaseport","title":"<code>database.port</code>","text":"<ul> <li>Type: <code>integer</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>5432</code></li> </ul> <p>The database port.</p>"},{"location":"config/properties/#databaseprotocol","title":"<code>database.protocol</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>postgresql</code></li> </ul> <p>The database protocol.</p>"},{"location":"config/properties/#databaseseed_data_path","title":"<code>database.seed_data_path</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>/data/seed</code></li> </ul> <p>The path to seed data for the database.</p>"},{"location":"config/properties/#databaseuser","title":"<code>database.user</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>permitta</code></li> </ul> <p>The database user.</p>"},{"location":"config/properties/#dbapi_connectorattribute_key_key","title":"<code>dbapi_connector.attribute_key_key</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>attribute_key</code></li> <li>Example: <code>attribute_key</code></li> </ul> <p>The key for attribute key in DBAPI connector.</p>"},{"location":"config/properties/#dbapi_connectorattribute_value_key","title":"<code>dbapi_connector.attribute_value_key</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>attribute_value</code></li> <li>Example: <code>attribute_value</code></li> </ul> <p>The key for attribute value in DBAPI connector.</p>"},{"location":"config/properties/#dbapi_connectorclient_type","title":"<code>dbapi_connector.client_type</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>trino</code></li> </ul> <p>The type of DBAPI client.</p>"},{"location":"config/properties/#dbapi_connectordata_object_table_column_query","title":"<code>dbapi_connector.data_object_table_column_query</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>SELECT table_name, column_name FROM information_schema.columns</code></li> </ul> <p>The query to get data object table columns.</p>"},{"location":"config/properties/#dbapi_connectorfq_name_key","title":"<code>dbapi_connector.fq_name_key</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>fq_name</code></li> <li>Example: <code>fq_name</code></li> </ul> <p>The key for fully qualified name in DBAPI connector.</p>"},{"location":"config/properties/#dbapi_connectorobject_type_key","title":"<code>dbapi_connector.object_type_key</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>object_type</code></li> <li>Example: <code>object_type</code></li> </ul> <p>The key for object type in DBAPI connector.</p>"},{"location":"config/properties/#ldap_clientbase_dn","title":"<code>ldap_client.base_dn</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>dc=example,dc=com</code></li> </ul> <p>The LDAP base DN.</p>"},{"location":"config/properties/#ldap_clienthost","title":"<code>ldap_client.host</code>","text":"<ul> <li>Type: <code>url</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>ldap.domain.com</code></li> </ul> <p>The LDAP server host.</p>"},{"location":"config/properties/#ldap_clientpassword","title":"<code>ldap_client.password</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>$LDAP_PASSWORD</code></li> </ul> <p>The LDAP password.</p>"},{"location":"config/properties/#ldap_clientport","title":"<code>ldap_client.port</code>","text":"<ul> <li>Type: <code>integer</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>3890</code></li> </ul> <p>The LDAP server port.</p>"},{"location":"config/properties/#ldap_clientuser_base_dn","title":"<code>ldap_client.user_base_dn</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>ou=people,dc=example,dc=com</code></li> </ul> <p>The LDAP user base DN.</p>"},{"location":"config/properties/#ldap_clientuser_dn","title":"<code>ldap_client.user_dn</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>uid=admin,ou=people,dc=example,dc=com</code></li> </ul> <p>The LDAP user DN.</p>"},{"location":"config/properties/#ldap_connectorattr_email","title":"<code>ldap_connector.attr_email</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>mail</code></li> </ul> <p>The LDAP attribute for email.</p>"},{"location":"config/properties/#ldap_connectorattr_first_name","title":"<code>ldap_connector.attr_first_name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>givenName</code></li> </ul> <p>The LDAP attribute for first name.</p>"},{"location":"config/properties/#ldap_connectorattr_groups","title":"<code>ldap_connector.attr_groups</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>memberOf</code></li> </ul> <p>The LDAP attribute for groups.</p>"},{"location":"config/properties/#ldap_connectorattr_last_name","title":"<code>ldap_connector.attr_last_name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>sn</code></li> </ul> <p>The LDAP attribute for last name.</p>"},{"location":"config/properties/#ldap_connectorattr_user_id","title":"<code>ldap_connector.attr_user_id</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>uid</code></li> </ul> <p>The LDAP attribute for user ID.</p>"},{"location":"config/properties/#ldap_connectorattr_user_name","title":"<code>ldap_connector.attr_user_name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>cn</code></li> </ul> <p>The LDAP attribute for user name.</p>"},{"location":"config/properties/#ldap_connectorgroup_name_regex","title":"<code>ldap_connector.group_name_regex</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>(.*)</code></li> <li>Example: <code>cn=(.*),ou=groups,dc=example,dc=com</code></li> </ul> <p>The regex to extract group names from LDAP group DNs.</p>"},{"location":"config/properties/#ldap_connectoruser_search_base","title":"<code>ldap_connector.user_search_base</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>ou=people,dc=example,dc=com</code></li> </ul> <p>The LDAP user search base.</p>"},{"location":"config/properties/#ldap_connectoruser_search_filter","title":"<code>ldap_connector.user_search_filter</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>(objectClass=person)</code></li> </ul> <p>The LDAP user search filter.</p>"},{"location":"config/properties/#loggerroot_level","title":"<code>logger.root_level</code>","text":"<ul> <li>Type: <code>enum</code></li> <li>Values: <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code></li> <li>Default: <code>INFO</code></li> <li>Example: <code>DEBUG</code></li> </ul> <p>Sets the log level of the root logger. This applies to all loggers within Permitta as they all inherit from the root logger.</p>"},{"location":"config/properties/#loggername_level","title":"<code>logger.&lt;name&gt;_level</code>","text":"<ul> <li>Type: <code>enum</code></li> <li>Values: <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code></li> <li>Default: <code>INFO</code></li> <li>Example: <code>DEBUG</code></li> </ul> <p>Sets the log level for a specific logger named <code>&lt;name&gt;</code>.</p>"},{"location":"config/properties/#opa_authz_providerpolicy_file_path","title":"<code>opa_authz_provider.policy_file_path</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>opa/permitta/authz.rego</code></li> </ul> <p>The path to the OPA policy file.</p>"},{"location":"config/properties/#opa_authz_providerpolicy_name","title":"<code>opa_authz_provider.policy_name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>permitta/authz</code></li> <li>Example: <code>permitta/authz</code></li> </ul> <p>The name of the OPA policy.</p>"},{"location":"config/properties/#opa_clienthostname","title":"<code>opa_client.hostname</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>localhost</code></li> <li>Example: <code>opa.permitta.svc.cluster.local</code></li> </ul> <p>The hostname of the OPA instance that Permitta should connect to.</p>"},{"location":"config/properties/#opa_clientpath","title":"<code>opa_client.path</code>","text":"<ul> <li>Type: <code>path</code></li> <li>Default: <code>/v1/data/permitta/authz/allow</code></li> <li>Example: <code>/v1/data/permitta/authz/allow</code></li> </ul> <p>The path to the OPA API endpoint.</p>"},{"location":"config/properties/#opa_clientport","title":"<code>opa_client.port</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>8181</code></li> <li>Example: <code>8181</code></li> </ul> <p>The port of the OPA instance.</p>"},{"location":"config/properties/#opa_clientscheme","title":"<code>opa_client.scheme</code>","text":"<ul> <li>Type: <code>enum</code></li> <li>Values: <code>https</code>, <code>http</code></li> <li>Default: <code>http</code></li> <li>Example: <code>https</code></li> </ul> <p>The scheme to use when connecting to OPA. For production deployments, HTTPS should be used.</p>"},{"location":"config/properties/#opa_clienttimeout_seconds","title":"<code>opa_client.timeout_seconds</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>1</code></li> <li>Example: <code>10</code></li> </ul> <p>The timeout in seconds for OPA client requests.</p>"},{"location":"config/properties/#trino_clienthost","title":"<code>trino_client.host</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>trino.example.com</code></li> </ul> <p>The Trino server host.</p>"},{"location":"config/properties/#trino_clientpassword","title":"<code>trino_client.password</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>password</code></li> </ul> <p>The Trino password.</p>"},{"location":"config/properties/#trino_clientport","title":"<code>trino_client.port</code>","text":"<ul> <li>Type: <code>integer</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>8080</code></li> </ul> <p>The Trino server port.</p>"},{"location":"config/properties/#trino_clientusername","title":"<code>trino_client.username</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Default: <code>&lt;none&gt;</code></li> <li>Example: <code>trino</code></li> </ul> <p>The Trino username.</p>"},{"location":"security/auth/","title":"Authentication &amp; Authorisation","text":""},{"location":"security/auth/#api-authentication","title":"API Authentication","text":"<p>APIs are authenticated using an API key which can be generated via the CLI</p>"}]}